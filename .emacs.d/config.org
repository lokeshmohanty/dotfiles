#+TITLE: My Emacs Config
#+AUTHOR: Lokesh Mohanty

CHEATSHEET: [[file:cheatsheet.pdf][./cheatsheet.pdf]]

* PROGRAMS TO LOAD FIRST
** Package Management

Setup package.el to work with MELPA. And initialize it.
Run M-x list-packages to update packages list

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives 
               '("melpa" . "https://melpa.org/packages/"))  ;; It has many packages

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** Installing use-package

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

#+end_src

Globally enable use-package ensure(install package if not present)
It doesn't update the packages
#+begin_src emacs-lisp

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

#+end_src

** Update packages automatically

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))

#+end_src

** Don't place autosave files in the same directory as the actual file

#+begin_src emacs-lisp

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Update path to bash environment path

#+begin_src emacs-lisp

  (let ((path (shell-command-to-string "source <(grep -v bind ~/.bashrc); echo -n $PATH")))
    (setenv "PATH" path)
    (setq exec-path
          (append
           (split-string-and-unquote path ":")
           exec-path)))
#+end_src

* STARTUP PERFORMANCE
** Garbage Collection

Reduce the frequency of garbage collection

#+begin_src emacs-lisp
  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    (gcmh-mode 1))
  ;; Setting garbage collection threshold
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

Decrease garbase collection thresold to increase frequency but decrease the total time taken.
It increases runtime performance

#+begin_src emacs-lisp
  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Native Compile

#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer noninteractive)
#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp

  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  ;; (set-fringe-mode 10)        ; Give some breathing room

#+end_src

** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(vterm-mode-hook
                  shell-mode-hook
                  neotree-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Scrolling

#+begin_src emacs-lisp

  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

#+end_src

** Theme

You can test themes by using the counsel-load-theme.
#+begin_src emacs-lisp

  (use-package doom-themes
                                          ;:ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))

#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Inconsolata"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "DejaVu Serif"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Inconsolata"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  ;; (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "Inconsolata-11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)
#+end_src

** Icons

Icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Change Modeline To Doom's Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)) ;; lower height messes up the text vertical alignment
    )

  ;; Decrease modeline font height
  (set-face-attribute 'mode-line nil :height 100)
  (set-face-attribute 'mode-line-inactive nil :height 100)

#+end_src

* KEY BINDINGS
** Helpful Default Keybindings
| Key   | Function          |
|-------+-------------------|
| C-h k | Describe key      |
| C-h v | Describe variable |
| C-h f | Describe function |
| C-h o | Describe symbol   |
| C-h b | Describe bindings |
| C-h m | Describe modes    |
| C-h P | Describe Package  |
| C-g   | Kill minibuffer   |
** Install general.el to define keybindings

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-evil-setup t)

    ;; general-simulate-key should not be quoted as it is supposed to be evaluated before assigning
    (leader-keys
      ;; "SPC" '(counsel-M-x :which-key "M-x")
      "SPC"  (general-simulate-key "M-x" :which-key "M-x") 
      "r"    (general-simulate-key "C-x r" :which-key "+register/bookmark") 
      "t"    (general-simulate-key "C-x t" :which-key "+tab")
      "o"   '(:ignore t :which-key "open")
      "oa"   '(org-agenda :which-key "org-agenda")
      "oc"   '(org-capture :which-key "org-capture")
      "oe"   '(eshell :which-key "eshell")
      "ot"   '(vterm :which-key "vterm")
      "hrr" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
      "hpc" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org"))))
    )

#+end_src

** Buffer

#+begin_src emacs-lisp

  (leader-keys
    "b"     '(:ignore t :which-key "buffer")
    "b b"   '(ibuffer :which-key "Ibuffer")
    ;; "b s"   '(switch-to-buffer :which-key "switch buffer")
    "b s"   '(consult-buffer :which-key "switch buffer")
    "b f"   '(consult-buffer-other-frame :which-key "open buffer in other frame")
    "b w"   '(consult-buffer-other-window :which-key "open buffer in other window")
    "b c"   '(clone-indirect-buffer-other-window :which-key "Clone buffer in other window")
    "b k"   '(kill-current-buffer :which-key "Kill current buffer")
    "b n"   '(next-buffer :which-key "Next buffer")
    "b p"   '(previous-buffer :which-key "Previous buffer")
    "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
    "b K"   '(kill-buffer :which-key "Kill buffer"))

#+end_src

** File

#+begin_src emacs-lisp

  (leader-keys
    ;; (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(find-file :which-key "Find file")
    "f"     '(:ignore t :which-key "file")
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))

#+end_src

** Window

| Command                             | Key        | Description                                      |
|-------------------------------------+------------+--------------------------------------------------|
| =shrink-window-horizontally=          | ~C-x {~      | Make the window smaller horizontally             |
| =enlarge-window-horizontally=         | ~C-x }~      | Make the window bigger horizontally              |
| =shrink-window=                       | None!      | Shrink the window vertically                     |
| =shrink-window-if-larger-than-buffer= | ~C-x -~      | Shrink the window vertically to buffer           |
| =dired-other-window=                  | ~C-x 4 d~    | Open Dired in another window                     |
| =dired-jump-other-window=             | ~C-x 4 j~    | Open Dired in another window at location of file |
| =scroll-other-window=                 | ~M-pgdn~     | Scroll the other window down without focusing it |
| =scroll-other-window-down=            | ~M-pgup~     | Scroll the other window up without focusing it   |
|-------------------------------------+------------+--------------------------------------------------|
| =evil-window-delete=                  | ~C-w C-c~    | Close the current window                         |
| =delete-other-windows=                | ~C-w C-o~    | Close all other windows                          |
| =evil-window-split=                   | ~C-w C-s~    | Split the current window horizontally            |
| =evil-window-vsplit=                  | ~C-w C-v~    | Split the current window vertically              |
| =evil-window-set-width=               | ~C-w (pipe)~ | Use numeric prefix to set window width           |
| =evil-window-set-height=              | ~C-w _~      | Use numeric prefix to set window height          |
| =balance-windows=                     | ~C-w =~      | Balance the sizes of all windows                 |
| =evil-window-next=                    | ~C-w C-w~    | Select the next visible window                   |
| =evil-window-prev=                    | ~C-w W~      | Select the previous visible window               |
| =ffap-other-window=                   | ~C-w C-f~    | Open a file in another window                    |
| =evil-window-left=                    | ~C-w h~      |                                                  |
| =evil-window-right=                   | ~C-w l~      |                                                  |
| =evil-window-up=                      | ~C-w k~      |                                                  |
| =evil-window-down=                    | ~C-w j~      |                                                  |

*TIP*: You can use a numeric argument before running =evil-window-set-width= and =evil-window-set-height= to specify the desired size of the window.


C-w -> Prefix for evil window commands

#+begin_src emacs-lisp

  ;; (winner-mode 1)
  (leader-keys
    "w"     '(:ignore t :which-key "window")
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    ;; winner mode
    ;; "w <left>"  '(winner-undo :which-key "Winner undo")
    ;; "w <right>" '(winner-redo :which-key "Winner redo")
    )

  ;; (use-package winner-mode
  ;;   :ensure nil
  ;;   :bind (:map evil-window-map
  ;;               ("u" . winner-undo)
  ;;               ("C-u" . winner-redo))
  ;;   :config
  ;;   (winner-mode))


#+end_src

** Tab
Basic Usage

    - =tab-bar-mode= - Enable display of the tab bar
    - =tab-new= (~C-x t 2~) - Create a new tab
    - =tab-next= (~C-x t o~, evil: ~g t~) - Move to the next tab (also known as =tab-bar-switch-to-next-tab=)
    - =tab-bar-switch-to-prev-tab= (evil: ~g T~) - Switch to the previous tab
    - =tab-rename= (~C-x t r~) - Rename the current tab (or numbered tab with prefix arg)
    - =tab-close= (~C-x t 0~) - Close the current tab
    - =tab-close-other= (~C-x t 1~) - Close other tabs
    - =tab-bar-undo-close-tab= - Reopen the last closed tab
    - =tab-move= (~C-x t m~) - Move the current tab to the right (or left with negative prefix)
    - =tab-bar-select-tab-by-name= (~C-x t RET~) - Select tab by name using completion

      Configuring operation

    - =tab-bar-new-tab-choice= - The name of a buffer or file to display in new tabs
    - =tab-bar-new-tab-to= - Where to place new tabs (left or right of current) - Also a function!
    - =tab-bar-tab-name-function= - Control how new tabs are named (can prompt for a name!)

      #+begin_src emacs-lisp

        ;; (setq tab-bar-new-tab-choice "*scratch*")

      #+end_src

      Configuring tab-bar appearance

      - =tab-bar-close-button-show= - Show or hide the close button
      - =tab-bar-new-button-show= - Show or hide the new button at the end
      - =tab-bar-button-relief= - Control pixel width of tab bar button appearance

      - =tab-bar= face - customize text of tabs
      - =tab-bar-tab= face - customize the color of the active tab
      - =tab-bar-tab-inactive= face - customize the color of inactive tabs

        #+begin_src emacs-lisp

          ;; (setq tab-bar-close-button-show nil
          ;;       tab-bar-new-button-show nil)

        #+end_src

        Using tab-bar-mode without showing the bar

        #+begin_src emacs-lisp

          ;; Don't turn on tab-bar-mode when tabs are created
          ;; (setq tab-bar-show nil)

          ;; ;; Get the current tab name for use in some other display
          ;; (defun efs/current-tab-name ()
          ;;   (alist-get 'name (tab-bar--current-tab)))

        #+end_src

** Register

#+begin_src emacs-lisp

  ;; (nvmap :prefix "SPC"
  ;;   "r c"   '(copy-to-register :which-key "Copy to register")
  ;;   "r f"   '(frameset-to-register :which-key "Frameset to register")
  ;;   "r i"   '(insert-register :which-key "Insert register")
  ;;   "r j"   '(jump-to-register :which-key "Jump to register")
  ;;   "r l"   '(list-registers :which-key "List registers")
  ;;   "r n"   '(number-to-register :which-key "Number to register")
  ;;   "r r"   '(counsel-register :which-key "Choose a register")
  ;;   "r v"   '(view-register :which-key "View a register")
  ;;   "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
  ;;   "r +"   '(increment-register :which-key "Increment register")
  ;;   "r SPC" '(point-to-register :which-key "Point to register"))

#+end_src

** Evaluate Elisp

#+begin_src emacs-lisp

  ;; (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  ;;   "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
  ;;   "e d"   '(eval-defun :which-key "Eval defun")
  ;;   "e e"   '(eval-expression :which-key "Eval elisp expression")
  ;;   "e l"   '(eval-last-sexp :which-key "Eval last sexression")
  ;;   "e r"   '(eval-region :which-key "Eval region"))

#+end_src

** Zooming In and Out

#+begin_src emacs-lisp

  ;; (global-set-key (kbd "C-=") 'text-scale-increase)
  ;; (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  ;; (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

** Hydra

Hydra helps in desgning transient key bindings to run commands easily 
#+begin_src emacs-lisp

  ;; (use-package hydra
  ;;   :defer t)

  ;; (defhydra hydra-text-scale (:timeout 4)
  ;;   "scale text"
  ;;   ("j" text-scale-increase "in")
  ;;   ("k" text-scale-decrease "out")
  ;;   ("f" nil "finished" :exit t))

  ;; (leader-keys
  ;;   "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* EVIL MODE

Extensible Vi layer for Emacs

Setup evil mode to use vim like keybindings
#+begin_src emacs-lisp
  (use-package evil
    :after general
    :init      ;; config before the package loads
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    ;; (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; ;; Use visual line motions even outside of visual-line-mode buffers(replacement for gj, gk)
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

* WHICH KEY
  
Minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
  (use-package which-key
    ;; :defer 0
    ;; :diminish which-key-mode
    :config
    (which-key-mode)
    ;; (setq which-key-idle-delay 0.7)
    )

  ;; (use-package which-key
  ;;   :init (which-key-mode)
  ;;   :diminish which-key-mode
  ;;   :config
  ;;   (setq which-key-idle-delay 0.3))
#+end_src

* MODES
** Delete selection mode
   
Visually select and replace text. (Probably not required)

#+begin_src emacs-lisp
  ;; (delete-selection-mode t)
#+end_src

** Writer room mode

Distraction free writing mode

#+begin_src emacs-lisp
  ;; (use-package writeroom-mode)
#+end_src

** Yasnippet global mode

Enable snippets globally. Add more snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][AndreaCrotti/yasnippet-snippets]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1)   ;; enables yasnippet globally
    ;; ;; enable yasnippet as a non-global minor mode
    ;; (yas-reload-all)
    ;; (add-hook 'prog-mode-hook #'yas-minor-mode)
    )
#+end_src

* FILE

Not required. Can be replaced with: counsel-find-file(SPC .) -> open as root(M-o r)
#+begin_src emacs-lisp
  ;; (use-package sudo-edit) ;; Utilities for opening files with sudo
#+end_src

* DIRED

---------------------------------
| Command                 | Key |
| dired-hide-details-mode | (   |
---------------------------------
#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  ;; (use-package dired-open)
  ;; (use-package peep-dired)

  (leader-keys
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    ;; "d p" '(peep-dired :which-key "Peep-dired")
    )

  ;; Custom function for dired
  ;; (progn
  ;;   (dired-jump-other-window)
  ;;   (dired-hide-details-mode)
  ;;   (evil-window-decrease-width 50)
  ;; )

  ;; (with-eval-after-load 'dired
  ;;   ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file) ; use dired-find-file instead if not using dired-open package
  ;; (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  ;;   (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

  ;; (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; ;; Get file icons in dired
  ;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  ;; (setq dired-open-extensions '(("gif" . "sxiv")
  ;;                               ("jpg" . "sxiv")
  ;;                               ("png" . "sxiv")
  ;;                               ("mkv" . "mpv")
  ;;                               ("mp4" . "mpv")))
#+end_src

* DASHBOARD
** Setup
#+begin_src emacs-lisp
  (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    (setq dashboard-filter-agenda-entry "+TODO=\"TODO\"&-STYLE=\"habit\"")

    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
#+end_src

** Open dashboard in emacsclient instead of scratch

#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* COMPLETION SYSTEM
** Vertico
#+begin_src emacs-lisp

  ;; Borrowed from systemcrafters.cc
  (defun me/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (delete-word (- arg))))

  ;; Enable vertico
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("C-b" . me/minibuffer-backward-kill))
    :custom 
    (vertico-cycle t)
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; The text menu bar works well with Vertico but always shows a *Completions* buffer, 
    ;; which is unwanted if you are using the Vertico UI. This completion buffer can be disabled as follows.
    ;; (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)

    ;; In combination with Orderless, hostnames are not made available for completion after entering /ssh:. 
    ;; In order to avoid this problem, the basic completion style should be specified for the file completion category.
    ;; (setq completion-styles '(orderless)
    ;;   completion-category-overrides '((file (styles basic partial-completion))))
    )
#+end_src

** Save History

Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp

  (use-package savehist
    :init
    (savehist-mode))

#+end_src

** Orderless

#+begin_src emacs-lisp

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** Marginalia

#+begin_src emacs-lisp

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :after vertico
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    ;; :bind (("M-A" . marginalia-cycle)
    ;;        :map minibuffer-local-map
    ;;        ("M-A" . marginalia-cycle))

    ;; :custom
    ;; (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src

** Consult

Extra commands for vertico

| consult-line                 |                                                                                                       |
| consult-ripgrep              |                                                                                                       |
| consult-buffer               |                                                                                                       |
| consult-imenu                | search through headings                                                                               |
| consult-org-heading          | like consult-imenu but for org                                                                        |
| consult-mark                 | Show a list of previous mark locations                                                                |
| consult-outline              | Show a list of headings in the current file depending on type                                         |
| consult-minor-mode-menu      | Show a list of all minor modes, press i SPC to narrow to active modes                                 |
| consult-history              | History for current minibuffer, also works for terminal modes                                         |
| consult-file-externally      | Open a file in an external program                                                                    |
| consult-preview-mode         | Preview selections for various commands                                                               |
| consult-completion-in-region | Can be used with the completion-in-region-function variable to do in-buffer completions using Vertico |

#+begin_src emacs-lisp

  ;; (defun dw/get-project-root ()
  ;;   (when (fboundp 'projectile-project-root)
  ;;     (projectile-project-root)))

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    ;; :custom
    ;; (consult-project-root-function #'dw/get-project-root)
    ;; (completion-in-region-function #'consult-completion-in-region)
    )

  (leader-keys
    "s"     '(:ignore t :which-key "search")
    "s s"   '(consult-line :which-key "search in current file")
    "s g"   '(consult-ripgrep :which-key "grep in current directory")
    ;; "s h"   '(consult-imenu :which-key "search headings in current file")
    "s h"   '(consult-outline :which-key "search headings in current file")
    "s o"   '(consult-org-heading :which-key "search org heading in current file")
    "s m"   '(consult-man :which-key "search man with regexp")
    )

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    ;; :map minibuffer-local-map
    ;; ("C-d" . embark-act))

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Show Embark actions via which-key
    ;; (setq embark-action-indicator
    ;;       (lambda (map)
    ;;         (which-key--show-keymap "Embark" map nil nil 'no-paging)
    ;;         #'which-key--hide-popup-ignore-command)
    ;;       embark-become-indicator embark-action-indicator)

    ;; Hide the mode line of the Embark live/completions buffers
    ;; (add-to-list 'display-buffer-alist
    ;;              '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
    ;;                nil
    ;;                (window-parameters (mode-line-format . none))))
    )

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Completions in Regions with Corfu

#+begin_src emacs-lisp

   (use-package corfu
     ;; :straight '(corfu :host github
     ;;                   :repo "minad/corfu")
     ;; Optional customizations
     :custom
     (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
     ;; (corfu-auto t)                 ;; Enable auto completion
     ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
     ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
     ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
     ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area

     ;; Optionally use TAB for cycling, default is `corfu-complete'.
     :bind (:map corfu-map
            ("C-j" . corfu-next)
            ("C-k" . corfu-previous))

     ;; You may want to enable Corfu only for certain modes.
     ;; :hook ((prog-mode . corfu-mode)
     ;;        (shell-mode . corfu-mode)
     ;;        (eshell-mode . corfu-mode))

     ;; Recommended: Enable Corfu globally.
     ;; This is recommended since dabbrev can be used globally (M-/).
     :init
     (corfu-global-mode))

   ;; Emacs tries to complete the word by searching all open buffers
   ;; Dabbrev is in-built into emacs. It works with Corfu
   (use-package dabbrev
     ;; Swap M-/ and C-M-/
     :bind (("M-/" . dabbrev-completion)
            ("C-M-/" . dabbrev-expand)))

   ;; A few more useful configurations...
   (use-package emacs
     :init
     ;; TAB cycle if there are only few candidates
     ;; (setq completion-cycle-threshold 3)

     ;; Enable indentation+completion using the TAB key.
     ;; `completion-at-point' is often bound to M-TAB.
     (setq tab-always-indent 'complete))

#+end_src

** Switching Directories with consult-dir

#+begin_src emacs-lisp

  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :custom
    (consult-dir-project-list-function nil))

  ;; ;; Thanks Karthik!
  ;; (with-eval-after-load 'eshell-mode
  ;;   (defun eshell/z (&optional regexp)
  ;;     "Navigate to a previously visited directory in eshell."
  ;;     (let ((eshell-dirs (delete-dups (mapcar 'abbreviate-file-name
  ;;                                             (ring-elements eshell-last-dir-ring)))))
  ;;       (cond
  ;;        ((and (not regexp) (featurep 'consult-dir))
  ;;         (let* ((consult-dir--source-eshell `(:name "Eshell"
  ;;                                                    :narrow ?e
  ;;                                                    :category file
  ;;                                                    :face consult-file
  ;;                                                    :items ,eshell-dirs))
  ;;                (consult-dir-sources (cons consult-dir--source-eshell consult-dir-sources)))
  ;;           (eshell/cd (substring-no-properties (consult-dir--pick "Switch directory: ")))))
  ;;        (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
  ;;                        (completing-read "cd: " eshell-dirs))))))))

#+end_src

** Other Config

#+begin_src emacs-lisp

  ;; ;; A few more useful configurations...
  ;; (use-package emacs
  ;;   :init
  ;;   ;; Add prompt indicator to `completing-read-multiple'.
  ;;   ;; Alternatively try `consult-completing-read-multiple'.
  ;;   (defun crm-indicator (args)
  ;;     (cons (concat "[CRM] " (car args)) (cdr args)))
  ;;   (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;;   ;; Do not allow the cursor in the minibuffer prompt
  ;;   (setq minibuffer-prompt-properties
  ;;         '(read-only t cursor-intangible t face minibuffer-prompt))
  ;;   (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;   ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;;   ;; Vertico commands are hidden in normal buffers.
  ;;   ;; (setq read-extended-command-predicate
  ;;   ;;       #'command-completion-default-include-p)

  ;;   ;; Enable recursive minibuffers
  ;;   (setq enable-recursive-minibuffers t)) 

#+end_src

* JUMPING WITH AVY

#+begin_src emacs-lisp

  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

  (leader-keys
    "j"   '(:ignore t :which-key "jump")
    "jj"  '(avy-goto-char :which-key "jump to char")
    "jw"  '(avy-goto-word-0 :which-key "jump to word")
    "jl"  '(avy-goto-line :which-key "jump to line"))

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

  "emacs-avy"

#+end_src

* DEVELOPMENT
** Basic Config
*** Set tab width as 2
#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)

#+end_src

*** Use spaces instead of tabs for indentation

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)
#+end_src

** Language Server Protocol (LSP)
*** lsp-mode
Use Language server protocol.
[[https://github.com/emacs-lsp/lsp-mode/wiki][Wiki]], [[https://emacs-lsp.github.io/lsp-mode/][Documentation]]
[[https://emacs-lsp.github.io/lsp-mode/page/languages/][Language Documentation]]

#+begin_src emacs-lisp

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)  ;; integrate with which-key for help with bindings
    )
#+end_src

Useful commands: flymake-show-diagnostics-buffer (show error messages on the fly)
*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

  This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

  #+begin_src emacs-lisp

    (use-package lsp-treemacs
      :after lsp)

  #+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  ;; (use-package company
  ;;   :after lsp-mode
  ;;   :hook (lsp-mode . company-mode)
  ;;   :bind (:map company-active-map
  ;;               ("<tab>" . company-complete-selection))  ;; use tab instead of enter for autocompletion
  ;;   (:map lsp-mode-map
  ;;         ("<tab>" . company-indent-or-complete-common))
  ;;   :custom
  ;;   (company-minimum-prefix-length 1)
  ;;   (company-idle-delay 0.0))

  ;; ;; (use-package company-box
  ;; ;;   :hook (company-mode . company-box-mode))

#+end_src

** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  ;; (use-package dap-mode
  ;;   ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;;   ;; :custom
  ;;   ;; (lsp-enable-dap-auto-configure nil)
  ;;   ;; :config
  ;;   ;; (dap-ui-mode 1)
  ;;   :commands dap-debug
  ;;   :config
  ;;   ;; Set up Node debugging
  ;;   (require 'dap-node)
  ;;   (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;;   ;; Bind `C-c l d` to `dap-hydra` for easy access
  ;;   (general-define-key
  ;;    :keymaps 'lsp-mode-map
  ;;    :prefix lsp-keymap-prefix
  ;;    "d" '(dap-hydra t :wk "debugger")))

#+end_src

** Language Support
Packages for syntax highlighting in programming languages
#+begin_src emacs-lisp
  (use-package haskell-mode)
  (use-package markdown-mode)
#+end_src
*** TypeScript
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

  npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Angular
    
Installation from [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode docmentation]]
#+begin_src shell
  npm install -g @angular/language-service@next typescript  @angular/language-server
#+end_src

Fixes warning -> (Unknown notification: angular/projectLanguageService) from [[https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server][lsp-mode]]

#+begin_src emacs-lisp
  (setq lsp-clients-angular-language-server-command
        '("node"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules/@angular/language-server"
          "--ngProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--tsProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--stdio"))
#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

  # pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  ;; (use-package python-mode
  ;;   :ensure t
  ;;   :hook (python-mode . lsp-deferred)
  ;;   :custom
  ;;   ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;;   ;; (python-shell-interpreter "python3")
  ;;   ;; (dap-python-executable "python3")
  ;;   (dap-python-debugger 'debugpy)
  ;;   :config
  ;;   (require 'dap-python))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  ;; (use-package pyvenv
  ;;   :after python-mode
  ;;   :config
  ;;   (pyvenv-mode 1))

#+end_src

** Emmet
Great for producing HTML and CSS selectors. [[https://github.com/smihica/emmet-mode][Documentation]]
Key bindings
| C-j       | emmet-expand           | expand the tag                 |
| C-M-left  | emmet-next-edit-point  | goto emmet next edit point     |
| C-M-right | emmet-prev-edit-point  | goto emmet previous edit point |
| C-c C-c w | emmet-wrap-with-markup |                                |

#+begin_src emacs-lisp
  (use-package emmet-mode)
#+end_src

** PROJECTILE

Enable projectile mode
#+begin_src emacs-lisp
  (use-package projectile
    ;; :diminish projectile-mode
    :config (projectile-mode)
    ;; (projectile-global-mode 1) ;; automatically add projects whose files are accessed
    ;; :init
    ;; (setq projectile-switch-project-action #'projectile-dired)
    ) 
  (leader-keys
    "p"   '(projectile-command-map :which-key "projectile"))
#+end_src

Adds extra commands to M-o inside ivy-buffer
#+begin_src emacs-lisp
  ;; (use-package counsel-projectile
  ;;   :after projectile
  ;;   :config (counsel-projectile-mode))
#+end_src

Key Bindings
| SPC p | projectile-command-map |

** TREEMACS

File tree viewer.
[[https://github.com/Alexander-Miller/treemacs][Documentation]]
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-integration]]

#+begin_src emacs-lisp
  (use-package treemacs)

  ;; Add :after if needed
  (use-package treemacs-evil)
  (use-package treemacs-projectile)

  ;; show hidden files
  ;; (setq-default neo-show-hidden-files t)

  (leader-keys 
    "d"    '(:ignore t :which-key "directory viewer")
    "d t"  '(treemacs :which-key "treemacs")
    "d e"  '(treemacs-display-current-project-exclusively :which-key "treemacs")
    )
#+end_src

** MAGIT
*** Key Bindings
| C-x g | magit-status         |
| l r   | magit-reflog-current |
|       | magit-file-untrack   |

#+begin_src emacs-lisp
  (use-package magit)
  (leader-keys
    "g"      '(:ignore t :which-key "git")
    "g s"    '(magit-status :which-key "git status")
    "g l"    '(magit-log :which-key "git log")
    "g b"    '(magit-blame :which-key "git blame")
    )
#+end_src

*** Custom commands to use magit on dotfiles
Run *me/magit-status-bare* to use magit on dotfiles. To revert magit in order to use it for other repos run *me/magit-status*.

#+begin_src emacs-lisp
  (setq bare-git-dir (concat "--git-dir=" (expand-file-name "~/.cfg")))
  (setq bare-work-tree (concat "--work-tree=" (expand-file-name "~")))

  ;; use magit on git bare repos like dotfiles repos
  (defun me/magit-status-bare ()
    "set --git-dir and --work-tree in `magit-git-global-arguments' to `bare-git-dir' and `bare-work-tree' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (add-to-list 'magit-git-global-arguments bare-git-dir)
    (add-to-list 'magit-git-global-arguments bare-work-tree)
    (call-interactively 'magit-status))

  ;; if you use `me/magit-status-bare' you cant use `magit-status' on other other repos 
  ;; you have to unset `--git-dir' and `--work-tree' use `me/magit-status' insted it unsets 
  ;; those before calling `magit-status'
  (defun me/magit-status ()
    "sets the default value in `magit-git-global-arguments' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (setq-default magit-git-global-arguments (eval (car (get 'magit-git-global-arguments 'standard-value)))))
#+end_src

** PERSPECTIVE

Similar to workspaces. Each perspective has its own buffer list and
window layout.

# #+begin_src emacs-lisp
# (use-package perspective
#   :bind
#   ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
#   :config
#   (persp-mode))
# #+end_src

* ORG MODE
*** Todo
Add keybindins for
- org-toggle-link-display 
*** Tips
|-------------------------+---------|
| Commands                | binding |
|-------------------------+---------|
| org-insert-link         | C-c C-l |
| org-toggle-link-dislpay |         |
| org-todo                | C-c C-t |
|-------------------------+---------|

|----------------------+--------------------------|
| M-<up>               | Move the title up        |
| M-<down>             |                          |
| M-<left>             | Increase heading         |
| M-<rignt>            | Decrease heading         |
| C-c C-o              | org-open-at-point        |
| C-c C-j              | org-goto                 |
| C-c C-t              | org-todo                 |
| Shift-<left>,<right> | org-todo                 |
| C-c C-l              | org-insert-link          |
| M-<enter>            |                          |
|----------------------+--------------------------|
| C-c C-s              | org-schedule             |
| C-c C-d              | org-deadline             |
| C-c C-x e            | org-set-effort           |
| C-c C-x p            | org-set-property         |
|----------------------+--------------------------|
| C-c C-x C-i          | org-clock-in             |
| C-c C-x C-o          | org-clock-out            |
| C-c C-x C-j          | org-clock-jump           |
|                      | org-clock-report         |
|----------------------+--------------------------|
| C-c M-:              | repeat-complex-command   |
| C-c *                | org-ctrl-c-star          |
| C-c -                | org-ctrl-c-minus         |
|                      | counsel-org-goto         |
|                      | org-export-dispatch      |
|                      | org-footnote-new         |
|                      | org-toggle-heading       |
|                      | org-toggle-item          |
|                      | org-toggle-checkbox      |
|                      | org-babel-tangle         |
|                      | org-toggle-inline-images |
|                      | org-todo-list            |
# | C-c ESC ESC          | repeat-complex-command |

M-<Enter> -> Continue adding tags in add tag minibuffer
*** Config
**** Basic
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-directory "~/Org/")
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t     ;; hide rich text markers      
        org-hide-block-startup nil
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-capture-bookmark nil

        ;; Org Source indentation
        org-src-fontify-natively t       
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-src-preserve-indentation nil
        org-fontify-quote-and-verse-blocks t
        ;; org-confirm-babel-evaluate nil
        )

  (leader-keys 
    "m"      '(:ignore t :which-key "Mode Specific Bindings")
    "m t"      '(org-toggle-link-display :which-key "Toggle the display of link")
    )
#+end_src

**** Modules

#+begin_src emacs-lisp

  (use-package org-bullets)
  ;; (use-package org-habit)

  (setq org-modules '(
                      ;; org-crypt
                      org-agenda
                      org-habit
                      org-bullets              ;; show bullets instead of asterisks
                      ;; org-bookmark
                      ;; org-eshell
                      ;; org-irc
                      ))
  (add-hook 'org-mode-hook 'org-bullets-mode)

#+end_src

**** Todo
#+begin_src emacs-lisp
  ;; '!' -> record timestamp; '@' -> record a note; x/y -> do x while entering state, y while exiting state
  (setq org-todo-keywords 
        '(
          (sequence "TODO(t@/!)" "ACTIVE(a!)" "BACKLOG(b!)" "HOLD(h@/!)" "|" "DONE(D!)")
          (sequence "WAITING(w@/!)" "DELEGATED(d@/!)" "|" "ASSIGNED(A@/!)" "CANCELLED(C@/!)")
          (sequence "CONSUME(c!)" "CONSUMING(k!)" "SHARE(s@/!)" "|" "IGNORED(I@/!)" "REFERENCE(R!)" "SHARED(S!)")
          (sequence "VISIT(v!)" "|" "VISITED(V!)")  ;; physically
          (sequence "|" "NOTE(N)" "BOOKMARK(B)")  ;; static todo keywords
          ))
  ;; )
#+end_src

**** Journal
[[https://github.com/bastibe/org-journal][Documentation]]

Currently using org-capture for journaling
#+begin_src emacs-lisp

  ;; (use-package org-journal
  ;;   :defer t
  ;;   :init
  ;;   ;; Change default prefix key; needs to be set before loading org-journal
  ;;   (setq org-journal-prefix-key "C-c j ")
  ;;   :config
  ;;   (setq org-journal-dir "~/Org/journal/"
  ;; 	org-journal-date-format "%A, %d %B %Y"))

  ;; (setq org-journal-date-format "%B %d, %Y (%A) ")
  ;; (setq org-journal-file-format "%Y-%m-%d.org")
#+end_src

**** Agenda
     
#+begin_src emacs-lisp
  (setq org-agenda-files '(
                           "~/Org/Agenda.org"
                           "~/Org/Tasks.org"
                           "~/Org/Journal.org"
                           "~/Org/Birthdays.org"
                           "~/Org/Habits.org"
                           "~/Org/References.org"
                           "~/Org/Work.org"
                           ))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-log-reschedule 'note)
  (setq org-log-redeadline 'note)
  ;; (setq org-log-clock-out 'note)
  ;; (setq org-log-refile 'note)
  ;; (setq org-log-note-clock-out t)
  ;; (setq org-trest-insert-todo-heading-as-state-change t) ;; log inserting a heading

#+end_src

**** Agenda Custom 
#+begin_src emacs-lisp
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("T" "Tasks" tags "-STYLE=\"habit\"")
          ;; ("t" "Tasks" tags "+TODO={.*}&-STYLE=\"habit\"")

          ("h" "Habits" tags "+STYLE=\"habit\"")

          ("b" "Backlogs"
           ((todo "BACKLOG"
                  ((org-agenda-overriding-header "Backlog Tasks")))))

          ("R" "References to visit/consume" tags-todo "+CONSUME")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Office Status"
           ((tags "+@work+TODO=\"TODO\""
                  ((org-agenda-overriding-header "TODO")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"ACTIVE\""
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"BACKLOG\""
                  ((org-agenda-overriding-header "Todo when I am free")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"WAITING\""
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"DELEGATED\""
                  ((org-agenda-overriding-header "Delegated to some one else")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"ASSIGNED\""
                  ((org-agenda-overriding-header "Assigned")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"COMPLETED\+TODO=\"DONE\""
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (tags "+@work+TODO=\"CANCELED\""
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

**** Habit

# org-habit-toggle-habits
# org-habit-toggle-display-in-agenda

# org-habit-show-habits-only-for-today
# org-habit-show-all-today
# org-habit-show-habits
This is particularly useful if you use the org-habits module and you are late to file the completion of a habit. If you complete the habit with org-todo it will be completed for the current day, and scheduled to repeat at the next repeat interval based on the current date. If you use org-todo-at-date and set the appropriate date, the task will be scheduled to repeat as though the task had been completed on the specified date.
#+begin_src emacs-lisp
  ;; (require 'org-habit)
  ;; (add-to-list 'org-modules 'org-habit)
  ;; (setq org-habit-graph-column 60)
  (defun org-todo-at-date (date)
    (interactive (list (org-time-string-to-time (org-read-date))))
    (cl-flet ((org-current-effective-time (&rest r) date)
              (org-today (&rest r) (time-to-days date)))
      (org-todo)))
#+end_src

**** Tag
#+begin_src emacs-lisp
  (setq org-tag-alist
        '((:startgroup)
          ;; Enter mutually exclusive groups here
          (:endgroup)
          (:startgrouptag)
          ("@work" . ?W)
          (:grouptags)
          ("new-gen" . ?N)
          ("idm" . ?I)
          ("appplication" . ?A)
          ("equipment" . ?E)
          (:endgrouptag)
          ("org-config" . ?o)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("note" . ?n)
          ("idea" . ?i)))
#+end_src

**** Capture Templates

+-------------+-------------------------------------------------------------------+
| Prefix -> % |                                                                   |
|-------------+-------------------------------------------------------------------|
| ?           | cursor position                                                   |
| U           | org capture source file link                                      |
| c           | clipboard                                                         |
| I           | hours (12 hr format)                                              |
| M           | minutes                                                           |
| p           | AM or PM                                                          |
| a           | source link                                                       |
| ^G          | prompt for tags                                                   |
| ^t          | pick date from calendar                                           |
|-------------+-------------------------------------------------------------------|
| %T          | Time stamp as above, with date and time.                          |
| %u, %U      | Like the above, but inactive time stamps.                         |
| %i          | Initial content, copied from the active region.  If               |
|             | there is text before %i on the same line, such as                 |
|             | indentation, and %i is not inside a %(sexp), that prefix          |
|             | will be added before every line in the inserted text.             |
| %a          | Annotation, normally the link created with org-store-link.        |
| %A          | Like %a, but prompt for the description part.                     |
| %l          | Like %a, but only insert the literal link.                        |
| %c          | Current kill ring head.                                           |
| %x          | Content of the X clipboard.                                       |
| %k          | Title of currently clocked task.                                  |
| %K          | Link to currently clocked task.                                   |
| %n          | User name (taken from the variable user-full-name).               |
| %f          | File visited by current buffer when org-capture was called.       |
| %F          | Full path of the file or directory visited by current buffer.     |
| %:keyword   | Specific information for certain link types, see below.           |
| %^g         | Prompt for tags, with completion on tags in target file.          |
| %^G         | Prompt for tags, with completion on all tags in all agenda files. |
| %^t         | Like %t, but prompt for date.  Similarly %^T, %^u, %^U.           |
|             | You may define a prompt like: %^{Please specify birthday}t.       |
|             | The default date is that of %t, see above.                        |
| %^C         | Interactive selection of which kill or clip to use.               |
| %^L         | Like %^C, but insert as link.                                     |
| %^{prop}p   | Prompt the user for a value for property prop.                    |
| %^{prompt}  | Prompt the user for a string and replace this sequence with it.   |
|             | A default value and a completion table ca be specified like this: |
|             | %^{prompt| default | completion2 | completion3 | ...}.            |
| %?          | After completing the template, position cursor here.              |
| %\1 ... %\N | Insert the text entered at the nth %^{prompt}, where N            |
|             | is a number, starting from 1.                                     |
+-------------+-------------------------------------------------------------------+
| file        | choose the file to add the entry                                  |
| olp         | choose the outlinepath for the entry                              |
| datetree    | automatically choose/insert the date tree i.e year>month>day      |
+-------------+-------------------------------------------------------------------+
              

#+begin_src emacs-lisp
  (setq org-capture-templates 
        `(("t" "Tasks")
          ("tt" "General Task" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("ts" "Scheduled Task" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("td" "Task with deadline" entry 
           (file+olp "~/Org/Tasks.org" "Inbox")
           "* TODO %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)

          ("w" "Work Tasks")
          ("wt" "Task" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("ws" "Scheduled Task" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\nSCHEDULED: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("wd" "Task with deadline" entry 
           (file+olp "~/Org/Work.org" "INBOX")
           "* TODO %? %^G:@work:\nDEADLINE: %^t\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i" 
           :empty-lines 1)
          ("wn" "Work Note" entry 
           (file+olp "~/Org/Work.org" "NOTES")
           "* NOTE %? :@work\n:PROPERTIES:\n:CATEGORIES: %^{Categories}\n:Created: %U\n:LOCATION: %a\n:END:\n  %i")

          ("b" "Bookmarks / References")
          ("bl" "Links to visit" entry 
           (file+olp "~/Org/References.org" "Links")
           "* CONSUME [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n  %i" 
           :empty-lines 1)
          ("bb" "Bookmark" entry 
           (file+olp "~/Org/References.org" "Bookmarks")
           "* BOOKMARK [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:REPEAT_TO_STATE: BOOKMARK\n:LOGGING: DONE(!)\n:END:\n  %i")
          ("bb" "Bookmark" entry 
           (file+olp "~/Org/References.org" "Bookmarks")
           "* BOOKMARK [[%c][%^{Link Title}]] %^G\n:PROPERTIES:\n:Created: %U\n:REPEAT_TO_STATE: BOOKMARK\n:LOGGING: DONE(!)\n:END:\n  %i")

          ("n" "Notes")
          ("nn" "General Note" entry 
           (file "~/Org/Notes.org")
           "* NOTE %? %^G\n:PROPERTIES:\n:Created: %U\n:LOCATION: %a\n:END:\n  %i")

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Org/Journal.org")
           "\n* %<%I:%M %p> - %? :journal:\n"
           :clock-in :clock-resume
           :empty-lines 1)

          ("h" "Habit Entries")
          ("hd" "Daily Habit" entry
           (file+olp "~/Org/Habits.org" "Daily Habits")
           "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hw" "Weekly Habit" entry
           (file+olp "~/Org/Habits.org" "Weekly Habits")
           "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hm" "Monthly Habit" entry
           (file+olp "~/Org/Habits.org" "Monthly Habits")
           "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hy" "Yearly Habit" entry
           (file+olp "~/Org/Habits.org" "Yearly Habits")
           "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:STYLE:    habit\n:Created: %U\n:END:\n"
           :empty-lines 1)
          ("hr" "Repeat Tasks" entry 
           (file "~/Org/Habits.org")
           "* REPEAT %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPERTIES:\n:Created: %U\n:STYLE: habit\n:REPEAT_TO_STATE: REPEAT\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n")

          ;; ("w" "Workflows")
          ;; ("we" "Checking Email" entry (file+olp+datetree "~/Org/Journal.org")
          ;;  "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/Org/Metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
          ))
#+end_src

**** Refile
#+begin_src emacs-lisp
  (setq org-refile-targets '(
                             (nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)
                             ;; ("Archive.org" :maxlevel . 1)
                             ;; ("Tasks.org" :maxlevel . 1)
                             ))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

**** Evil key bindings for org mode

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    )
#+end_src

**** Use abbreviations instead of lengthy URL.

#+begin_src emacs-lisp
  ;; An example of how this works.
  ;; [[arch-wiki:Name_of_Page][Description]]
  ;; This overwrites the default list
  (setq org-link-abbrev-alist 
        '(("google" . "http://www.google.com/search?q=")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("stack-exchange" . "https://emacs.stackexchange.com/a/")
          ("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

**** Toc
It helps to have an up-to-date table of contents in org files without
exporting. Use :TOC: to create the table.

#+begin_src emacs-lisp
  (use-package toc-org :commands toc-org-enable :init (add-hook
                                                       'org-mode-hook 'toc-org-enable)) 
#+end_src


**** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;; (with-eval-after-load 'org
  ;;   (org-babel-do-load-languages
  ;;       'org-babel-load-languages
  ;;       '((emacs-lisp . t)
  ;;       (python . t)))

  ;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

**** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; ;; Automatically tangle our Emacs.org config file when we save it
  ;; (defun efs/org-babel-tangle-config ()
  ;;   (when (string-equal (file-name-directory (buffer-file-name))
  ;;                       (expand-file-name user-emacs-directory))
  ;;     ;; Dynamic scoping to the rescue
  ;;     (let ((org-confirm-babel-evaluate nil))
  ;;       (org-babel-tangle))))

  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


**** Prevent M-Ret from adding blank lines

#+begin_src emacs-lisp
  ;; (setq org-blank-before-new-entry (quote ((heading . nil)
  ;;                                          (plain-list-item . nil))))
#+end_src

**** Export to manpage format

#+begin_src emacs-lisp
  ;; (use-package ox-man
  ;;   :ensure nil)
#+end_src

**** Drag and drop into org files
#+begin_src emacs-lisp
  ;; Drag and drop images to org files
  ;; (use-package org-download)
  ;; (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

*** Related Packages

- org-wild-notifier

* ELFEED

# #+begin_src emacs-lisp
# (use-package elfeed
#   :config
#   (setq elfeed-search-feed-face ":foreground #fff :weight bold"
#         elfeed-feeds (quote
#                        (("https://www.reddit.com/r/linux.rss" reddit linux)
#                         ("https://www.reddit.com/r/commandline.rss" reddit commandline)
#                         ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
#                         ("https://www.reddit.com/r/emacs.rss" reddit emacs)
#                         ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
#                         ("https://hackaday.com/blog/feed/" hackaday linux)
#                         ("https://opensource.com/feed" opensource linux)
#                         ("https://linux.softpedia.com/backend.xml" softpedia linux)
#                         ("https://itsfoss.com/feed/" itsfoss linux)
#                         ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
#                         ("https://www.phoronix.com/rss.php" phoronix linux)
#                         ("http://feeds.feedburner.com/d0od" omgubuntu linux)
#                         ("https://www.computerworld.com/index.rss" computerworld linux)
#                         ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
#                         ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
#                         ("https://betanews.com/feed" betanews linux)
#                         ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
#                         ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))

# (use-package elfeed-goodies
#   :init
#   (elfeed-goodies/setup)
#   :config
#   (setq elfeed-goodies/entry-pane-size 0.5))

# (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
# (evil-define-key 'normal elfeed-show-mode-map
#   (kbd "J") 'elfeed-goodies/split-show-next
#   (kbd "K") 'elfeed-goodies/split-show-prev)
# (evil-define-key 'normal elfeed-search-mode-map
#   (kbd "J") 'elfeed-goodies/split-show-next
#   (kbd "K") 'elfeed-goodies/split-show-prev)
# #+end_src

* EMOJI

# #+begin_src emacs-lisp
# (use-package emojify
#   :hook (after-init . global-emojify-mode))
# #+end_src

* TO TRY
** TODO Emacs Packages
- [ ] ivy-posframe
- [ ] evil-snipe
- [ ] evil-mark-replace
- [ ] evil-exchange
- [ ] vertico, consult
** TODO Others 
- [ ] [[https://github.com/daviwil/emacs-from-scratch][EFS Tutorial]]
- [ ] [[https://cestlaz.github.io/stories/emacs/][EFS Reference]]
- [ ] [[github.com/nloyola/.emacs.d/blob/master/config.org][Nloyola Emacs Reference]]
- [ ] [[github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
- [ ] [[https://opensource.com/article/20/1/emacs-cheat-sheet][Extending Emacs]]
- [ ] Highlight matching parenthesis
* REFERENCES
- Distrotube's GNU Emacs Config
- Daviwil's Emacs From Scratch Config
