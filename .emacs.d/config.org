#+TITLE: My Emacs Config
#+AUTHOR: Lokesh Mohanty

CHEATSHEET: [[file:cheatsheet.pdf][./cheatsheet.pdf]]

* PROGRAMS TO LOAD FIRST
** Package Management
Setup package.el to work with MELPA. And initialize it.
Run M-x list-packages to update packages list

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives 
               '("melpa" . "https://melpa.org/packages/"))  ;; It has many packages

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Installing use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

Globally enable use-package ensure(install package if not present)
It doesn't update the packages
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Update packages automatically
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Don't place autosave files in the same directory as the actual file
#+begin_src emacs-lisp
  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* STARTUP PERFORMANCE
** Garbage Collection

Reduce the frequency of garbage collection

#+begin_src emacs-lisp
  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    (gcmh-mode 1))
  ;; Setting garbage collection threshold
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

Decrease garbase collection thresold to increase frequency but decrease the total time taken.
It increases runtime performance

#+begin_src emacs-lisp
  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Native Compile

#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer noninteractive)
#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  ;; (set-fringe-mode 10)        ; Give some breathing room
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(vterm-mode-hook
                  shell-mode-hook
                  neotree-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Scrolling
#+begin_src emacs-lisp
  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+end_src

** Theme

You can test themes by using the counsel-load-theme.
#+begin_src emacs-lisp
  (use-package doom-themes
                                          ;:ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Inconsolata"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "DejaVu Serif"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Inconsolata"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  ;; (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "Inconsolata-11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)
#+end_src

** Icons

Icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** Change Modeline To Doom's Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)) ;; lower height messes up the text vertical alignment
    )

  ;; Decrease modeline font height
  (set-face-attribute 'mode-line nil :height 100)
  (set-face-attribute 'mode-line-inactive nil :height 100)
#+end_src

* WHICH KEY
  
Minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
  (use-package which-key
    ;; :defer 0
    ;; :diminish which-key-mode
    :config
    (which-key-mode)
    ;; (setq which-key-idle-delay 0.7)
    )
#+end_src

* KEY BINDINGS
** Helpful Default Keybindings
| Key   | Function          |
|-------+-------------------|
| C-h k | Describe key      |
| C-h v | Describe variable |
| C-h f | Describe function |
| C-h o | Describe symbol   |
| C-h b | Describe bindings |
| C-h m | Describe modes    |
| C-h P | Describe Package  |
| C-g   | Kill minibuffer   |
** Install general.el to define keybindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-evil-setup t)

    ;; general-simulate-key should not be quoted as it is supposed to be evaluated before assigning
    (leader-keys
      "SPC" '(counsel-M-x :which-key "M-x")
      "r"    (general-simulate-key "C-x r" :which-key "+register/bookmark") 
      "t"    (general-simulate-key "C-x t" :which-key "+tab")
      "o"   '(:ignore t :which-key "open")
      "oa"   '(org-agenda :which-key "org-agenda")
      "oc"   '(org-capture :which-key "org-capture")
      "oe"   '(eshell :which-key "eshell")
      "ot"   '(vterm :which-key "vterm")
      "hrr" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
      "hpc" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org"))))
    )
#+end_src

** Buffer

#+begin_src emacs-lisp
  (leader-keys
    "b"     '(:ignore t :which-key "buffer")
    "b b"   '(ibuffer :which-key "Ibuffer")
    "b s"   '(switch-to-buffer :which-key "switch buffer")
    "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
    "b k"   '(kill-current-buffer :which-key "Kill current buffer")
    "b n"   '(next-buffer :which-key "Next buffer")
    "b p"   '(previous-buffer :which-key "Previous buffer")
    "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
    "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

** File

#+begin_src emacs-lisp
  (leader-keys
    ;; (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(find-file :which-key "Find file")
    "f"     '(:ignore t :which-key "file")
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Window

#+begin_src emacs-lisp
  (winner-mode 1)
  (leader-keys
    "w"     '(:ignore t :which-key "window")
    "w c"   '(evil-window-delete :which-key "Close window")
    "w n"   '(evil-window-new :which-key "New window")
    "w s"   '(evil-window-split :which-key "Horizontal split window")
    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
    ;; Window motions
    "w h"   '(evil-window-left :which-key "Window left")
    "w j"   '(evil-window-down :which-key "Window down")
    "w k"   '(evil-window-up :which-key "Window up")
    "w l"   '(evil-window-right :which-key "Window right")
    "w w"   '(evil-window-next :which-key "Goto next window")
    ;; winner mode
    "w <left>"  '(winner-undo :which-key "Winner undo")
    "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** Register

#+begin_src emacs-lisp
  ;; (nvmap :prefix "SPC"
  ;;   "r c"   '(copy-to-register :which-key "Copy to register")
  ;;   "r f"   '(frameset-to-register :which-key "Frameset to register")
  ;;   "r i"   '(insert-register :which-key "Insert register")
  ;;   "r j"   '(jump-to-register :which-key "Jump to register")
  ;;   "r l"   '(list-registers :which-key "List registers")
  ;;   "r n"   '(number-to-register :which-key "Number to register")
  ;;   "r r"   '(counsel-register :which-key "Choose a register")
  ;;   "r v"   '(view-register :which-key "View a register")
  ;;   "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
  ;;   "r +"   '(increment-register :which-key "Increment register")
  ;;   "r SPC" '(point-to-register :which-key "Point to register"))
#+end_src

** Evaluate Elisp

#+begin_src emacs-lisp
  ;; (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
  ;;   "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
  ;;   "e d"   '(eval-defun :which-key "Eval defun")
  ;;   "e e"   '(eval-expression :which-key "Eval elisp expression")
  ;;   "e l"   '(eval-last-sexp :which-key "Eval last sexression")
  ;;   "e r"   '(eval-region :which-key "Eval region"))
#+end_src

** Zooming In and Out

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-=") 'text-scale-increase)
  ;; (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  ;; (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Hydra

Hydra helps in desgning transient key bindings to run commands easily 
#+begin_src emacs-lisp
  ;; (use-package hydra
  ;;   :defer t)

  ;; (defhydra hydra-text-scale (:timeout 4)
  ;;   "scale text"
  ;;   ("j" text-scale-increase "in")
  ;;   ("k" text-scale-decrease "out")
  ;;   ("f" nil "finished" :exit t))

  ;; (leader-keys
  ;;   "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* EVIL MODE

Extensible Vi layer for Emacs

Setup evil mode to use vim like keybindings
#+begin_src emacs-lisp
  (use-package evil
    :after general
    :init      ;; config before the package loads
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    ;; (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; ;; Use visual line motions even outside of visual-line-mode buffers(replacement for gj, gk)
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

* MODES
** Delete selection mode
   
Visually select and replace text. (Probably not required)

#+begin_src emacs-lisp
  ;; (delete-selection-mode t)
#+end_src

** Writer room mode

Distraction free writing mode

#+begin_src emacs-lisp
  ;; (use-package writeroom-mode)
#+end_src

** Yasnippet global mode

Enable snippets globally. Add more snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][AndreaCrotti/yasnippet-snippets]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1)   ;; enables yasnippet globally
    ;; ;; enable yasnippet as a non-global minor mode
    ;; (yas-reload-all)
    ;; (add-hook 'prog-mode-hook #'yas-minor-mode)
    )
#+end_src

* FILE

Not required. Can be replaced with: counsel-find-file(SPC .) -> open as root(M-o r)
#+begin_src emacs-lisp
  ;; (use-package sudo-edit) ;; Utilities for opening files with sudo
#+end_src

* DIRED

---------------------------------
| Command                 | Key |
| dired-hide-details-mode | (   |
---------------------------------
#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  ;; (use-package dired-open)
  ;; (use-package peep-dired)

  (leader-keys
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    ;; "d p" '(peep-dired :which-key "Peep-dired")
    )

  ;; Custom function for dired
  ;; (progn
  ;;   (dired-jump-other-window)
  ;;   (dired-hide-details-mode)
  ;;   (evil-window-decrease-width 50)
  ;; )

  ;; (with-eval-after-load 'dired
  ;;   ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-find-file) ; use dired-find-file instead if not using dired-open package
  ;; (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  ;;   (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

  ;; (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; ;; Get file icons in dired
  ;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  ;; (setq dired-open-extensions '(("gif" . "sxiv")
  ;;                               ("jpg" . "sxiv")
  ;;                               ("png" . "sxiv")
  ;;                               ("mkv" . "mpv")
  ;;                               ("mp4" . "mpv")))
#+end_src

* DASHBOARD
** Setup
#+begin_src emacs-lisp
  (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
#+end_src

** Open dashboard in emacsclient instead of scratch

#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* IVY (COUNSEL/SWIPER)
Generic completion mechanism for Emacs.
** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish                          ;; doesn't show ivy minor mode in the modeline
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window)
           :map ivy-minibuffer-map
           ;; ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    ;; :custom
    ;; (setq ivy-count-format "(%d/%d) ")
    ;; (setq ivy-use-virtual-buffers t)
    ;; (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
#+end_src

** Counsel

#+begin_src emacs-lisp
  (use-package counsel
    ;; :after ivy                     ;; commented as I don't know if it's required
    ;; :bind (("C-M-j" . 'counsel-switch-buffer)
    ;;        :map minibuffer-local-map
    ;;        ("C-r" . 'counsel-minibuffer-history))
    :config (counsel-mode))
#+end_src

** Swiper

#+begin_src emacs-lisp
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)))
#+end_src

** Ivy-rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :config
    ;;   :custom
    ;;   (ivy-virtual-abbreviate 'full
    ;;    ivy-rich-switch-buffer-align-virtual-buffer t
    ;;    ivy-rich-path-style 'abbrev)
    ;;   :config
    ;;   (ivy-set-display-transformer 'ivy-switch-buffer
    ;;                                'ivy-rich-switch-buffer-transformer)
    (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
#+end_src

** Other
Remove the default '^' string in prompts
#+begin_src emacs-lisp
  ;; (setq ivy-initial-inputs-alist nil)
#+end_src

Remember and show M-x history (last used commands)
#+begin_src emacs-lisp
  (use-package smex)
  (smex-initialize)
#+end_src

** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp
  ;; (use-package ivy-prescient
  ;;   :after counsel
  ;;   :custom
  ;;   (ivy-prescient-enable-filtering nil)
  ;;   :config
  ;;   ;; Uncomment the following line to have sorting remembered across sessions!
  ;;   ;(prescient-persist-mode 1)
  ;;   (ivy-prescient-mode 1))
#+end_src

* HELPFUL

Adds a lot of information to the describe- command buffers like source code and other examples.
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* DEVELOPMENT
** Language Server Protocol (LSP)
*** lsp-mode
Use Language server protocol.
[[https://emacs-lsp.github.io/lsp-mode/page/languages/][Language Documentation]]

#+begin_src emacs-lisp

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)  ;; integrate with which-key for help with bindings
    )
#+end_src

Useful commands: flymake-show-diagnostics-buffer (show error messages on the fly)
*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))  ;; use tab instead of enter for autocompletion
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))

#+end_src

** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  ;; (use-package dap-mode
  ;;   ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;;   ;; :custom
  ;;   ;; (lsp-enable-dap-auto-configure nil)
  ;;   ;; :config
  ;;   ;; (dap-ui-mode 1)
  ;;   :commands dap-debug
  ;;   :config
  ;;   ;; Set up Node debugging
  ;;   (require 'dap-node)
  ;;   (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;;   ;; Bind `C-c l d` to `dap-hydra` for easy access
  ;;   (general-define-key
  ;;    :keymaps 'lsp-mode-map
  ;;    :prefix lsp-keymap-prefix
  ;;    "d" '(dap-hydra t :wk "debugger")))

#+end_src

** Language Support
Packages for syntax highlighting in programming languages
#+begin_src emacs-lisp
  ;;(use-package haskell-mode)
  ;;(use-package markdown-mode)
#+end_src
*** TypeScript
**** Basic Setup
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

  npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Angular
#+begin_src shell
  npm install -g @angular/language-service@next typescript  @angular/language-server
#+end_src

#+begin_src emacs-lisp
  (setq lsp-clients-angular-language-server-command
        '("node"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules/@angular/language-server"
          "--ngProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--tsProbeLocations"
          "/home/lokesh/.nvm/versions/node/v14.16.0/lib/node_modules"
          "--stdio"))
#+end_src


*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

  # pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  ;; (use-package python-mode
  ;;   :ensure t
  ;;   :hook (python-mode . lsp-deferred)
  ;;   :custom
  ;;   ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;;   ;; (python-shell-interpreter "python3")
  ;;   ;; (dap-python-executable "python3")
  ;;   (dap-python-debugger 'debugpy)
  ;;   :config
  ;;   (require 'dap-python))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  ;; (use-package pyvenv
  ;;   :after python-mode
  ;;   :config
  ;;   (pyvenv-mode 1))

#+end_src

** PROJECTILE

Enable projectile mode
#+begin_src emacs-lisp
  (use-package projectile
    ;; :diminish projectile-mode
    :config (projectile-mode)
    ;; (projectile-global-mode 1) ;; automatically add projects whose files are accessed
    :init
    (setq projectile-switch-project-action #'projectile-dired)
    ) 
  (leader-keys
    "p"   '(projectile-command-map :which-key "projectile"))
#+end_src

Adds extra commands to M-o inside ivy-buffer
#+begin_src emacs-lisp
  ;; (use-package counsel-projectile
  ;;   :after projectile
  ;;   :config (counsel-projectile-mode))
#+end_src

Key Bindings
| SPC p | projectile-command-map |

** TREEMACS

File tree viewer.
[[https://github.com/Alexander-Miller/treemacs][Documentation]]

#+begin_src emacs-lisp
  (use-package treemacs)

  ;; Add :after if needed
  (use-package treemacs-evil)
  (use-package treemacs-projectile)

  ;; show hidden files
  ;; (setq-default neo-show-hidden-files t)

  (leader-keys 
    "d"    '(:ignore t :which-key "directory viewer")
    ;; "d t"  '(treemacs :which-key "treemacs(file viewer)")
    "d t"  '(treemacs-add-and-display-current-project :which-key "treemacs")
    "d e"  '(treemacs-display-current-project-exclusively :which-key "treemacs")
    )
#+end_src

** MAGIT

Git client.

#+begin_src emacs-lisp
  (setq bare-git-dir (concat "--git-dir=" (expand-file-name "~/.cfg")))
  (setq bare-work-tree (concat "--work-tree=" (expand-file-name "~")))

  ;; use maggit on git bare repos like dotfiles repos, don't forget to change `bare-git-dir' and `bare-work-tree' to your needs
  (defun me/magit-status-bare ()
    "set --git-dir and --work-tree in `magit-git-global-arguments' to `bare-git-dir' and `bare-work-tree' and calls `magit-status'"
    (interactive)
    (require 'magit-git)
    (add-to-list 'magit-git-global-arguments bare-git-dir)
    (add-to-list 'magit-git-global-arguments bare-work-tree)
    (call-interactively 'magit-status))

  ;; if you use `me/magit-status-bare' you cant use `magit-status' on other other repos you have to unset `--git-dir' and `--work-tree'
  use `me/magit-status' insted it unsets those before calling `magit-status'
  (defun me/magit-status ()
    "removes --git-dir and --work-tree in `magit-git-global-arguments' and calls `magit-status'"
    (interactive)
    (require 'magit-git)

    (use-package magit)
    (leader-keys
      "g"      '(:ignore t :which-key "git")
      "g s"    '(magit-status :which-key "git status")
      "g l"    '(magit-log :which-key "git log")
      "g b"    '(magit-status :which-key "git blame")
      )
    )
#+end_src
Key Bindings
| C-x g | magit-status |

** PERSPECTIVE

Similar to workspaces. Each perspective has its own buffer list and
window layout.

# #+begin_src emacs-lisp
# (use-package perspective
#   :bind
#   ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
#   :config
#   (persp-mode))
# #+end_src

* ORG MODE
*** Tips
|-------------------------+---------|
| Commands                | binding |
|-------------------------+---------|
| org-insert-link         | C-c C-l |
| org-toggle-link-dislpay |         |
| org-todo                | C-c C-t |
|-------------------------+---------|

|----------------------+--------------------------|
| M-<up>               | Move the title up        |
| M-<down>             |                          |
| M-<left>             | Increase heading         |
| M-<rignt>            | Decrease heading         |
| C-c C-o              | org-open-at-point        |
| C-c C-j              | org-goto                 |
| C-c C-t              | org-todo                 |
| Shift-<left>,<right> | org-todo                 |
| C-c C-l              | org-insert-link          |
| M-<enter>            |                          |
|----------------------+--------------------------|
| C-c C-s              | org-schedule             |
| C-c C-d              | org-deadline             |
| C-c C-x e            | org-set-effort           |
| C-c C-x p            | org-set-property         |
| C-c M-:              | repeat-complex-command   |
| C-c *                | org-ctrl-c-star          |
| C-c -                | org-ctrl-c-minus         |
|                      | counsel-org-goto         |
|                      | org-export-dispatch      |
|                      | org-footnote-new         |
|                      | org-toggle-heading       |
|                      | org-toggle-item          |
|                      | org-toggle-checkbox      |
|                      | org-babel-tangle         |
|                      | org-toggle-inline-images |
|                      | org-todo-list            |
# | C-c ESC ESC          | repeat-complex-command |

M-<Enter> -> Continue adding tags in add tag minibuffer

*** Config
**** Basic
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-directory "~/Org/")
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t     ;; hide rich text markers      
        org-hide-block-startup nil
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-capture-bookmark nil

        ;; Org Source indentation
        org-src-fontify-natively t       
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-src-preserve-indentation nil
        org-fontify-quote-and-verse-blocks t
        ;; org-confirm-babel-evaluate nil
        )
#+end_src

**** Modules

#+begin_src emacs-lisp
  (setq org-modules '(
                      ;; org-crypt
                      org-agenda
                      org-habit
                      ;; org-bookmark
                      ;; org-eshell
                      ;; org-irc
                      ))
#+end_src

**** Todo
#+begin_src emacs-lisp
  (setq org-todo-keywords '(
                            (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
                            ))
  ;; )
#+end_src

**** Journal
#+begin_src emacs-lisp
  ;; (setq org-journal-dir "~/Org/journal/")
  ;; (setq org-journal-date-format "%B %d, %Y (%A) ")
  ;; (setq org-journal-file-format "%Y-%m-%d.org")
#+end_src

**** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '(
                           "~/Org/Agenda.org"
                           "~/Org/Tasks.org"
                           "~/Org/Journal.org"
                           "~/Org/Birthdays.org"
                           "~/Org/Habits.org"
                           ))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src
**** Agenda Custom 
#+begin_src emacs-lisp
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

**** Habit
#+begin_src emacs-lisp
  (require 'org-habit)
  ;; (add-to-list 'org-modules 'org-habit)
  ;; (setq org-habit-graph-column 60)
#+end_src
**** Tag
#+begin_src emacs-lisp
  (setq org-tag-alist
        '((:startgroup)
                                          ; Put mutually exclusive tags here
          (:endgroup)
          ("@home" . ?H)
          ("@work" . ?W)
          ("org-config" . ?o)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))
#+end_src

**** Refile
#+begin_src emacs-lisp
  (setq org-refile-targets '(
                             (nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)
                             ;; ("Archive.org" :maxlevel . 1)
                             ;; ("Tasks.org" :maxlevel . 1)
                             ))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

**** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates `(
                                ("t" "Tasks / Projects")
                                ("tt" "Task" entry 
                                 (file+olp "~/Org/Tasks.org" "Inbox")
                                 "* TODO %?\n  %U\n  %a\n  %i" 
                                 :empty-lines 1)

                                ("j" "Journal Entries")
                                ("jj" "Journal" entry
                                 (file+olp+datetree "~/Org/Journal.org")
                                 "\n* %<%I:%M %p> - %^{Journal Title} :journal:\n\n%?\n\n"
                                 :clock-in :clock-resume
                                 :empty-lines 1)
                                ("jm" "Meeting" entry
                                 (file+olp+datetree "~/Org/Journal.org")
                                 "* %<%I:%M %p> - %^{Meeting Title} :meetings:\n\n%?\n\n"
                                 :clock-in :clock-resume
                                 :empty-lines 1)

                                ("w" "Workflows")
                                ("we" "Checking Email" entry (file+olp+datetree "~/Org/Journal.org")
                                 "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

                                ("m" "Metrics Capture")
                                ("mw" "Weight" table-line (file+headline "~/Org/Metrics.org" "Weight")
                                 "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
                                ))
#+end_src

**** Show bullets instead of asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    )
#+end_src

**** Evil key bindings for org mode

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    )
#+end_src


**** Toc
It helps to have an up-to-date table of contents in org files without
exporting. Use :TOC: to create the table.

#+begin_src emacs-lisp
  ;; (use-package toc-org :commands toc-org-enable :init (add-hook
  ;;   'org-mode-hook 'toc-org-enable)) 
#+end_src

**** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;; (with-eval-after-load 'org
  ;;   (org-babel-do-load-languages
  ;;       'org-babel-load-languages
  ;;       '((emacs-lisp . t)
  ;;       (python . t)))

  ;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

**** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; ;; Automatically tangle our Emacs.org config file when we save it
  ;; (defun efs/org-babel-tangle-config ()
  ;;   (when (string-equal (file-name-directory (buffer-file-name))
  ;;                       (expand-file-name user-emacs-directory))
  ;;     ;; Dynamic scoping to the rescue
  ;;     (let ((org-confirm-babel-evaluate nil))
  ;;       (org-babel-tangle))))

  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


**** Use abbreviations instead of lengthy URL.

#+begin_src emacs-lisp
  ;; ;; An example of how this works.
  ;; ;; [[arch-wiki:Name_of_Page][Description]]
  ;; (setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
  ;;       '(("google" . "http://www.google.com/search?q=")
  ;;         ("ddg" . "https://duckduckgo.com/?q=")
  ;;         ("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

**** Syntax highlighting for source code blocks

#+begin_src emacs-lisp
#+end_src

**** Prevent M-Ret from adding blank lines

#+begin_src emacs-lisp
  ;; (setq org-blank-before-new-entry (quote ((heading . nil)
  ;;                                          (plain-list-item . nil))))
#+end_src

**** Export to manpage format

#+begin_src emacs-lisp
  ;; (use-package ox-man
  ;;   :ensure nil)
#+end_src

**** Drag and drop into org files
#+begin_src emacs-lisp
  ;; Drag and drop images to org files
  ;; (use-package org-download)
  ;; (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

*** Related Packages

- org-wild-notifier

* ELFEED

# #+begin_src emacs-lisp
# (use-package elfeed
#   :config
#   (setq elfeed-search-feed-face ":foreground #fff :weight bold"
#         elfeed-feeds (quote
#                        (("https://www.reddit.com/r/linux.rss" reddit linux)
#                         ("https://www.reddit.com/r/commandline.rss" reddit commandline)
#                         ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
#                         ("https://www.reddit.com/r/emacs.rss" reddit emacs)
#                         ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
#                         ("https://hackaday.com/blog/feed/" hackaday linux)
#                         ("https://opensource.com/feed" opensource linux)
#                         ("https://linux.softpedia.com/backend.xml" softpedia linux)
#                         ("https://itsfoss.com/feed/" itsfoss linux)
#                         ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
#                         ("https://www.phoronix.com/rss.php" phoronix linux)
#                         ("http://feeds.feedburner.com/d0od" omgubuntu linux)
#                         ("https://www.computerworld.com/index.rss" computerworld linux)
#                         ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
#                         ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
#                         ("https://betanews.com/feed" betanews linux)
#                         ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
#                         ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))

# (use-package elfeed-goodies
#   :init
#   (elfeed-goodies/setup)
#   :config
#   (setq elfeed-goodies/entry-pane-size 0.5))

# (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
# (evil-define-key 'normal elfeed-show-mode-map
#   (kbd "J") 'elfeed-goodies/split-show-next
#   (kbd "K") 'elfeed-goodies/split-show-prev)
# (evil-define-key 'normal elfeed-search-mode-map
#   (kbd "J") 'elfeed-goodies/split-show-next
#   (kbd "K") 'elfeed-goodies/split-show-prev)
# #+end_src

* EMOJI

# #+begin_src emacs-lisp
# (use-package emojify
#   :hook (after-init . global-emojify-mode))
# #+end_src

* TO TRY
** TODO Emacs Packages
- [ ] ivy-posframe
- [ ] evil-snipe
- [ ] evil-mark-replace
- [ ] evil-exchange
- [ ] vertico, consult
** TODO Others 
- [ ] [[https://github.com/daviwil/emacs-from-scratch][EFS Tutorial]]
- [ ] [[https://cestlaz.github.io/stories/emacs/][EFS Reference]]
- [ ] [[github.com/nloyola/.emacs.d/blob/master/config.org][Nloyola Emacs Reference]]
- [ ] [[github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
- [ ] [[https://opensource.com/article/20/1/emacs-cheat-sheet][Extending Emacs]]
- [ ] Highlight matching parenthesis
  
