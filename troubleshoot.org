#+TITLE: Troubleshoot (troubleshooting tips)
#+AUTHOR: Lokesh Mohanty

* Linux
** Process
- check and kill a process listening on a port
#+begin_src shell
  sudo fuser -k <PORT>/tcp
  sudo netstat -pna | awk -F '[ /]+' '/<PORT>/ {print$7}' | xargs kill
  lsof -n -i :<PORT> | awk '/LISTEN/ {print $2}' | xargs kill
#+end_src

- Application exits when it tries to open a file window: Reinstalling `shared-mime-info` fixes it
** Cron
References: [[https://serverfault.com/a/449652][How to fix all crontab related problems (linux)]]

- Make sure to set ~PATH~ (default: ~/bin:/usr/bin~ only)
- Make sure to have a newline at the end (delimeter for cron)
- For root permissions, run ~sudo crontab -e~ instead with no ~sudo~

** Firewall
- Check allowed ports
#+begin_src shell
  sudo ufw status verbose
#+end_src

- Allow a port
#+begin_src shell
    sudo ufw allow 3000/tcp
#+end_src

** locate command
- Update the database
#+begin_src shell
  sudo updatedb
#+end_src

- locate with permissions
#+begin_src shell
  ls -l $(locate -e <fileName>)
#+end_src

** Redirect stdout and stder
#+begin_src shell
  # Old way of redirection
  # Redirects only stdout
  ls > output
  # Redirects both stdout and stderr by merging stderr with stdout
  ls > output 2>&1

  # New way of redirection
  # Redirects both stdout and stderr
  ls &> output
  # Redirects both stdout and stderr but appends instead of replacing
  ls &>> output
#+end_src

** Change boot runlevel to multi user(used graphical instead of multi-user to revert)
- To change for the next boot
#+begin_src shell
  systemctl enable multi-user.target
  systemctl set-default multi-user.target
#+end_src

- To change for the current boot
#+begin_src shell
  systemctl isolate multi-user.target
#+end_src

- Manual way(not recommended)
#+begin_src shell
  rm -f /etc/systemd/system/default.target
  ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
#+end_src

** Font
- Download a [font](http://nerdfonts.com/)
- Unzip and copy to ~~/fonts/~
- Run ~fc-cache -fv~ to manually rebuild the font cache
- If icons appear as rectangles then install Font-awesome and restart

** Swap escape and capslock
- In gnome based desktop environment
#+begin_src shell
  dconf write "/org/gnome/desktop/input-sources/xkb-options" "['caps:swapescape']"
#+end_src

- Or
#+begin_src shell
  setxkbmap -option caps:swapescape
#+end_src

* Miscellaneous
- Hardware Info
#+begin_src shell
  inxi -Fxz
#+end_src

- Find processes
#+begin_src shell
  sudo netstat -tnlp
#+end_src

- Find pid of a process (i -> internet related, t -> only process id, :9000 -> only on this port) (lsof -> list of files(/proc files))
#+begin_src shell
  sudo lsof -t -i:9000
#+end_src

- Kill a process with pid
#+begin_src shell
  sudo kill -9 <pid>
#+end_src

- Find and kill a process(k -> kill, n tcp -> namespace tcp, 3000 -> port)
#+begin_src shell
  fuser -k -n tcp 3000
#+end_src

- View running process
#+begin_src shell
  ps -aux
#+end_src

- Get window information
#+begin_src shell
  xwininfo
#+end_src

- Find graphics card model
#+begin_src shell
  lspci | grep -i vga
#+end_src

- Find hardware info (display)
#+begin_src shell
  lshw -class display
#+end_src

- Disable system beep
#+begin_src shell
  rmmod pcspkr; echo "blacklist pcspkr" >> /etc/modprobe.d/blacklist.conf 
#+end_src

- View installed locale: `locale -a`
- Setup locale: `echo "LANG=en_US.UTF-8" > /etc/locale.conf`

- Splitting/Compression
#+begin_src shell
   # compress
  tar -czvf compressed.tar.gz file

  # create archives
  tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_

  # uncompress
  cat myfiles_split.tgz_* | tar xz
#+end_src

- Installing libraries (creates,  updates,  and removes the necessary links and cache for use by the run-time linker, ld.so) (library directory is optional)
#+begin_src shell
  sudo ldconfig <library directory>
#+end_src

- With SELinux enabled, error: "/home/user: change directory failed: Permission denied"
#+begin_src shell
  # Check output of ls -lZ /home
  # user directory labels should be uconfirmed_u:object_r:user_home_dir_t
  # if not, run the below command
  restorecon -R /home
#+end_src

* Applications
** Scrot
- Generate thumbnail, <num> is percentage of original size
#+begin_src shell
  scrot --thumb <num>
#+end_src

- Execute operations on saved images
#+begin_src shell
  scrot -e 'mv $f ~/Pictures/'
#+end_src

- Adjust quality of screenshot, <num> is in the scale of 1-100
#+begin_src shell
  scrot --quality <num>
#+end_src

** Emacs
*** When emacs hangs
#+begin_src shell
  pkill -SIGUSR2 emacs
#+end_src

Then run `M-x toggle-debug-on-quit`
source: [[https://emacs.stackexchange.com/a/21645][StackExchange]]

** Pandoc
- Convert html to org (-o: output, -f: from, -t: to)
#+begin_src shell
  pandoc -o test.org -f html -t org test.html
#+end_src

** Pulse audio
- Mute(toggle) application sound
#+begin_src shell
  pactl set-sink-input-mute <sink input index> toggle
#+end_src

- Get list of input sinks
#+begin_src shell
  pactl list sink-inputs
#+end_src

** Neovim

- Build from source
#+begin_src shell
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install
#+end_src

  - Dependencies
#+begin_src shell
  sudo apt install cmake pkg-config libtool libtool-bin m4 automake gettext
#+end_src

** Xmonad
- Get ~WM_CLASS~ for manageHook
#+begin_src shell
  xprop | grep WM_CLASS
#+end_src

** Npm
- For Error: EACCESS: permission denied, use the following argument
#+begin_src shell
  --unsafe-perm=true --allow-root
#+end_src

** Haskell
- Install haskell
#+begin_src shell
    wget -qO- https://get.haskellstack.org/ | sh
#+end_src

** GPG
- gpg basic commands(armor flag outputs to ascii text instead of binary)
#+begin_src shell
  gpg --full-generate-key
  gpg --list-keys (to list all keys)
  gpg --list-secret-keys (to list only private keys)
  gpg --encrypt --receipent <receipent name/any string> <file>
  gpg --encrypt --armor --receipent <receipent name/any string> <file>
  gpg --decrypt <file>
  gpg --output <file> --decrypt <encrypted-file>
  gpg --sign <file>
  gpg --clearsign <file>
  gpg --detach-sign <file>
#+end_src

- Start gpg-agent
#+begin_src shell
  # Check if gpg-agent is already running
  pgrep gpg-agent

  # If it's not running, you can start it with this command
  gpg-connect-agent /bye
#+end_src

- export/import private keys
#+begin_src shell
  gpg --export-secret-keys <key-id> > private.key
  gpg --import private.key
#+end_src

- delete keys
#+begin_src shell
  gpg --delete-keys
  gpg --delete-secret-keys
#+end_src
  
** SSH
*** Generate a new SSH key
#+begin_src shell
  ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#+end_src

*** Add key to ssh-agent
- Start ssh-agent in background(bash)
#+begin_src shell
  eval "$(ssh-agent -s)"
#+end_src

- Start ssh-agent in background(fish)
#+begin_src shell
  eval (ssh-agent -c)
#+end_src

- Add key to the agent(private)
#+begin_src shell
  ssh-add ~/.ssh/id_rsa
#+end_src

- List added keys to ssh-agent
#+begin_src shell
  ssh-add -l
#+end_src

*** Block password authentication
 PasswordAuthentication no 
 UsePAM no

** ffmpeg
- Concatenate 2 videos of same format(out.mp4 -> output file)(list.txt contains the file names -> file 'first.mp4' (next line) file 'second.mp4')
#+begin_src shell
  ffmpeg -f concat -i list.txt -c copy out.mp4
#+end_src

- Extract audio from video file(video.mp4 -> video file, output.mp3 -> extracted audio file)
#+begin_src shell
  ffmpeg -i video.mp4 -vn -ac 2 -ar 44100 -ab 320k -f mp3 output.mp3
#+end_src

- Compress video file(lower crf value has higher quality, 24 to 30 in general)
#+begin_src shell
  ffmpeg -i input.mp4 -vcodec libx265 -crf 24 output.mp4
#+end_src

- Convert video to gif
#+begin_src shell
  ffmpeg -i input.webm -pix_fmt rgb24 output.gif
#+end_src

- Speedup video by 10
#+begin_src shell
  ffmpeg -i input.webm -filter:v "setpts=PTS/10" output.webm
#+end_src

** Git
- To set upstream branch
#+begin_src shell
  git branch --set-upstream-to <remote/branch-name>
#+end_src

- To force pull a remote in git
#+begin_src shell
  git fetch origin master
  git reset --hard origin/master
#+end_src

- To force a pull from remote while maintaining local commits(local commits stored in new-branch)
#+begin_src shell
  git checkout master
  git branch new-branch
  git fetch --all
  git reset --hard origin/master
#+end_src

- To stash uncommitted changes
#+begin_src shell
  git stash
#+end_src

- To reapply stashed changes
#+begin_src shell
    git stash pop
#+end_src

- To send a pull request to upstream (start is the commit from where you last pulled)
#+begin_src shell
    git request-pull <start> <url> <end, default: HEAD>
#+end_src

- To ignore line ending errors between windows and linux
  - For Windows
#+begin_src shell
      git config --global core.autocrlf true
#+end_src

    - For Linux
#+begin_src shell
      git config --global core.autocrlf input
#+end_src

- To fix unexpected disconnect while reading sideband packet error while running git clone, run
#+begin_src shell
    git config --global http.postBuffer 157286400
#+end_src

*** Submodule
References: [[https://www.vogella.com/tutorials/GitSubmodules/article.html][blog]]

- Add
#+begin_src shell
  git submodule add <url>
#+end_src

- Remove
#+begin_src shell
  git rm <path-to-submodule>
  rm -rf .git/modules/<path-to-submodule>
  git config --remove-section submodule.<path-to-submodule>
#+end_src

- Fetch
#+begin_src shell
  git submodule add <url>
#+end_src

*** Config
- Auto sign commits in git with gpg key
#+begin_src shell
  git config --global user.signingkey <gpg-key>
  git config --global commit.gpgsign true
#+end_src

** Run iftop without sudo access

#+begin_src shell
  sudo setcap cap_net_raw=eip $(which iftop)
#+end_src

* Ubuntu
- Lock user
#+begin_src shell
  gnome-screensaver-command -l
#+end_src

- Unlock user
#+begin_src shell
  loginctl unlock-session <session-id>
 #+end_src

- Get all sessions
#+begin_src shell
  loginctl list-sessions --no-legend | while read id rest; do echo; loginctl show-session $id; done
#+end_src

- find the package a file came from
#+begin_src shell
  dpkg -S <file path>
#+end_src

- find the list of files that came from a package
#+begin_src shell
  dpkg -L <package name>
#+end_src

- Resolve `trying to overwrite error`
#+begin_src shell
  sudo dpkg -i --force-overwrite <pkg-name>
  sudo apt -f install
#+end_src
